#
# Copyright The NOMAD Authors.
#
# This file is part of NOMAD. See https://nomad-lab.eu for further info.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
from nomad.datamodel.metainfo.basesections import CompositeSystem
from nomad.datamodel.metainfo.eln import PublicationReference
from nomad.datamodel.data import EntryData
from nomad.datamodel.results import SymmetryNew
from nomad.datamodel.results import Cell
from nomad.datamodel.metainfo.eln import Substance
import numpy as np
from nomad.metainfo import (
    Package,
    Quantity,
    SubSection,
    MEnum,
    Section,
)
from nomad.datamodel.data import (
    EntryData,
    ArchiveSection,
)

m_package = Package(name='IKZ Material Database PoC')



### ========= general classes

class PublicationReference(PublicationReference, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()



class TemperatureSeries(ArchiveSection):
    '''
    A section describing a temperature depdendent property.
    '''
    m_def = Section()
    name = Quantity(
        type=str,
        description='''
        A descriptive name for this series. This is used to identify the series in plots.
        ''',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    values = Quantity(
        type=np.float64,
        description='''
        The array of values.
        ''',
        a_eln={
            "component": "NumberEditQuantity"
        },
        shape=["*"],
    )
    temperatures = Quantity(
        type=np.float64,
        description='''
        The array of times for the corresponding values.
        ''',
        a_eln={
            "component": "NumberEditQuantity"
        },
        shape=["*"],
        unit="K",
    )
    temperature_dependence_function = Quantity(
        type=str,
        description='''
        The function describing the temperature dependence.
        ''',
        a_eln={
            "component": "StringEditQuantity"
        },
    )


# =========  Classes for properties


class Density(TemperatureSeries, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    values = Quantity(
        type=np.float64,
        description='''
        The density of the material.
        ''',
        a_eln={
            "component": "NumberEditQuantity"
        },
        shape=["*"],
        unit="kg/m^3",
    )
    publication_reference = SubSection(
        section_def=PublicationReference,
    )


class ElasticStiffness(TemperatureSeries, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    name = Quantity(
        type=str,
        description='''
        A descriptive name for this series. It could be derived form the reference such as `Jordan 1980`.
        ''',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    values = Quantity(
        type=np.float64,
        description='''
        The elastic stiffness of the material.
        ''',
        a_eln={
            "component": "NumberEditQuantity",
            "label": "Elastic Stiffness"
        },
        shape=["*"],
        unit="Pa",
    )
    publication_reference = SubSection(
        section_def=PublicationReference,
    )

class CriticalResolvedShearStress(TemperatureSeries, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    name = Quantity(
        type=str,
        description='''
        A descriptive name for this series. It could be derived form the reference such as `Jordan 1980`.
        ''',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    values = Quantity(
        type=np.float64,
        description='''
        The critical resolved shear stress of the material.
        ''',
        a_eln={
            "component": "NumberEditQuantity",
            "label": "Critical resolved shear stress"
        },
        shape=["*"],
        unit="Pa",
    )
    publication_reference = SubSection(
        section_def=PublicationReference,
    )


    
class Viscosity(TemperatureSeries, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    name = Quantity(
        type=str,
        description='''
        A descriptive name for this series. It could be derived form the reference such as `Jordan 1980`.
        ''',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    values = Quantity(
        type=np.float64,
        description='''
        The viscosity of the material.
        ''',
        a_eln={
            "component": "NumberEditQuantity",
            "label": "Viscosity"
        },
        shape=["*"],
        unit="Pa*s",
    )
    publication_reference = SubSection(
        section_def=PublicationReference,
    )
    
class SurfaceTension(TemperatureSeries, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    name = Quantity(
        type=str,
        description='''
        A descriptive name for this series. It could be derived form the reference such as `Jordan 1980`.
        ''',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    values = Quantity(
        type=np.float64,
        description='''
        The surface tension of the material.
        ''',
        a_eln={
            "component": "NumberEditQuantity",
            "label": "Surface tension"
        },
        shape=["*"],
        unit="N/m",
    )
    publication_reference = SubSection(
        section_def=PublicationReference,
    )

class GrowthAngle(TemperatureSeries, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    name = Quantity(
        type=str,
        description='''
        A descriptive name for this series. It could be derived form the reference such as `Jordan 1980`.
        ''',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    values = Quantity(
        type=np.float64,
        description='''
        The growth_angle: of the material.
        ''',
        a_eln={
            "component": "NumberEditQuantity",
            "label": "Growth angle"
        },
        shape=["*"],
        unit="deg",
    )
    publication_reference = SubSection(
        section_def=PublicationReference,
    )

    
class ThermalExpansion(TemperatureSeries, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    name = Quantity(
        type=str,
        description='''
        A descriptive name for this series. It could be derived form the reference such as `Jordan 1980`.
        ''',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    values = Quantity(
        type=np.float64,
        description='''
        The thermal expansion of the material.
        ''',
        a_eln={
            "component": "NumberEditQuantity",
            "label": "Thermal expansion"
        },
        shape=["*"],
        unit="1/K",
    )
    publication_reference = SubSection(
        section_def=PublicationReference,
    )



class HeatCapacity(TemperatureSeries, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    name = Quantity(
        type=str,
        description='''
        A descriptive name for this series. It could be derived form the reference such as `Jordan 1980`.
        ''',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    values = Quantity(
        type=np.float64,
        description='''
        The heat capacity of the material.
        ''',
        a_eln={
            "component": "NumberEditQuantity",
            "label": "Heat capacity"
        },
        shape=["*"],
        unit="J/(kg*K)",
    )
    publication_reference = SubSection(
        section_def=PublicationReference,
    )

class HeatConductivity(TemperatureSeries, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    name = Quantity(
        type=str,
        description='''
        A descriptive name for this series. It could be derived form the reference such as `Jordan 1980`.
        ''',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    values = Quantity(
        type=np.float64,
        description='''
        The thermal conductivity of the material.
        ''',
        a_eln={
            "component": "NumberEditQuantity",
            "label": "Heat conductivity"
        },
        shape=["*"],
        unit="W/(m*K)",
    )
    publication_reference = SubSection(
        section_def=PublicationReference,
    )

    
class Emissivity(TemperatureSeries, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    name = Quantity(
        type=str,
        description='''
        A descriptive name for this series. It could be derived form the reference such as `Jordan 1980`.
        ''',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    values = Quantity(
        type=np.float64,
        description='''
        The emmisivity of the material.
        ''',
        a_eln={
            "component": "NumberEditQuantity",
            "label": "Emisivity"
        },
        shape=["*"],
    )

    
class ElectricalConductivity(TemperatureSeries, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    name = Quantity(
        type=str,
        description='''
        A descriptive name for this series. It could be derived form the reference such as `Jordan 1980`.
        ''',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    values = Quantity(
        type=np.float64,
        description='''
        The electrical conductivity of the material.
        ''',
        a_eln={
            "component": "NumberEditQuantity",
            "label": "Electrical conductivity"
        },
        shape=["*"],
        unit="S/m",
    )
    publication_reference = SubSection(
        section_def=PublicationReference,
    )


class MagneticSusceptibility(TemperatureSeries, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    name = Quantity(
        type=str,
        description='''
        A descriptive name for this series. It could be derived form the reference such as `Jordan 1980`.
        ''',
        a_eln={
            "component": "StringEditQuantity"
        },
    )
    values = Quantity(
        type=np.float64,
        description='''
        The critical resolved shear stress of the material.
        ''',
        a_eln={
            "component": "NumberEditQuantity",
            "label": "Magentic susceptibility"
        },
        shape=["*"],
        unit=" ",
    )
    publication_reference = SubSection(
        section_def=PublicationReference,
    )







    
# =========  Classes for Categories


class StructuralProperties(SymmetryNew, Cell, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    density = SubSection(
        section_def=Density,
        repeats=True,
    )
    thermalexpansion = SubSection(
        section_def=ThermalExpansion,
        repeats=True,
    )

class MechanicalProperties(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_plot=[
            {
                "label": "Elastic stiffness",
                "x": "elastic_stiffness/:/temperatures",
                "y": "elastic_stiffness/:/values"
            },
            {
                "label": "Critial resolved shear stress",
                "x": "critical_resolved_shear_stress/:/temperatures",
                "y": "critical_resolved_shear_stress/:/values",
                "layout": {
                    "yaxis": {
                        "type": "log"
                    }
                }
            },
            {
                "label": "Viscosity",
                "x": "viscosity/:/temperatures",
                "y": "viscosity/:/values"
            },
            {
                "label": "Surface tension",
                "x": "surface_tension/:/temperatures",
                "y": "surface_tension/:/values"
            },
            {
                "label": "Growth angle",
                "x": "growth_angle/:/temperatures",
                "y": "growth_angle/:/values"
            }
        ],)
    elastic_stiffness = SubSection(
        section_def=ElasticStiffness,
        repeats=True,
    )
    critical_resolved_shear_stress = SubSection(
        section_def=CriticalResolvedShearStress,
        repeats=True,
    )
    viscosity = SubSection(
        section_def=Viscosity,
        repeats=True,
    )
    surface_tension = SubSection(
        section_def=SurfaceTension,
        repeats=True,
    )
    growth_angle = SubSection(
        section_def=GrowthAngle,
        repeats=True,
    )



    
class ThermalProperties(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(
        a_plot=[
            {
                "label": "Heat conductivity",
                "x": "heat_conductivity/:/temperatures",
                "y": "heat_conductivity/:/values"
            },
            {
                "label": "Heat capacity",
                "x": "heat_capacity/:/temperatures",
                "y": "heat_capacity/:/values"
            },
            {
                "label": "Thermal expension",
                "x": "thermal_expansion/:/temperatures",
                "y": "thermal_expansion/:/values"
            }
        ],)
    heat_conductivity = SubSection(
        section_def=HeatConductivity,
        repeats=True,
    )
    heat_capacity = SubSection(
        section_def=HeatCapacity,
        repeats=True,
    )
    thermal_expansion = SubSection(
        section_def=ThermalExpansion,
        repeats=True,
    )

    
class ThermalRadiationProperties(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    emissivity = SubSection(
        section_def=Emissivity,
        repeats=True,
    )

class ElectroMagneticProperties(ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section()
    electrical_conductivity = SubSection(
        section_def=ElectricalConductivity,
        repeats=True,
    )
    magnetic_susceptibility = SubSection(
        section_def=MagneticSusceptibility,
        repeats=True,
    )


# ==========  General class for material
    
    
class IKZMaterial(Substance, EntryData, ArchiveSection):
    '''
    Class autogenerated from yaml schema.
    '''
    m_def = Section(a_plot=[{"label": "Heat conductivity",
                             "x": "thermal_properties/heat_conductivity/:/temperatures",
                             "y": "thermal_properties/heat_conductivity/:/values"},
                            {"label": "Heat capacity",
                             "x": "thermal_properties/heat_capacity/:/temperatures",
                             "y": "thermal_properties/heat_capacity/:/values"},
                            {"label": "Thermal expension",
                             "x": "thermal_properties/thermal_expansion/:/temperatures",
                             "y": "thermal_properties/thermal_expansion/:/values"},
                            {"label": "Elastic stiffness",
                             "x": "mechanical_properties/elastic_stiffness/:/temperatures",
                             "y": "mechanical_properties/elastic_stiffness/:/values"},
                            {"label": "Critial resolved shear stress",
                             "x": "mechanical_properties/critical_resolved_shear_stress/:/temperatures",
                             "y": "mechanical_properties/critical_resolved_shear_stress/:/values",
                             "layout": {"yaxis": {"type": "log"}}},
                            {"label": "Viscosity",
                             "x": "mechanical_properties/viscosity/:/temperatures",
                             "y": "mechanical_properties/viscosity/:/values"},
                            {"label": "Surface tension",
                             "x": "mechanical_properties/surface_tension/:/temperatures",
                             "y": "mechanical_properties/surface_tension/:/values"},
                            {"label": "Growth angle",
                             "x": "mechanical_properties/growth_angle/:/temperatures",
                             "y": "mechanical_properties/growth_angle/:/values"}],
                    a_eln={"hide": ["datetime",
                                    "users",
                                    "cas_uri",
                                    "cas_name",
                                    "cas_synonyms",
                                    "image",
                                    "inchi",
                                    "inchi_key",
                                    "smile",
                                    "canonical_smile",
                                    "molecular_weight"],
                           "lane_width": "800px"},
                    )
    molar_mass = Quantity(
        type=np.float64,
        description='''
        The molar mass of the material.
        ''',
        a_eln={
            "component": "NumberEditQuantity"
        },
        unit="g/mol",
    )
    aggregation_state = Quantity(
        type=MEnum(
            [
                'solid',
                'liquid',
                'gas',
                'interface solid-liquid',
                'interface solid-gas',
                'interface liquid-gas']),
        description='''
        The aggregation state of the material.
        ''',
        a_eln={
            "component": "RadioEnumEditQuantity"},
        default=["solid"],
    )
    description = Quantity(
        type=str,
        a_eln={
            "component": "RichTextEditQuantity"
        },
    )
    structural_properties = SubSection(
        section_def=StructuralProperties,
    )
    density = SubSection(
        section_def=Density,
    )
    thermal_radiation_properties = SubSection(
        section_def=ThermalRadiationProperties,
    )
    thermal_properties = SubSection(
        section_def=ThermalProperties,
    )
    mechanical_properties = SubSection(
        section_def=MechanicalProperties,
    )
    electro_magnetic_properties = SubSection(
        section_def=ElectroMagneticProperties,
    )



m_package.__init_metainfo__()

